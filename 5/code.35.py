from numpy import ndarray, array, zeros, max


def function(sequence_1: str, sequence_2: str) \
        -> str:
    # Initialize the grid for dynamic programming.
    matrix = zeros(shape=(len(sequence_1) + 1, len(sequence_2) + 1), dtype=int)

    # Fill the table
    for i in range(1, len(sequence_1) + 1):
        for j in range(1, len(sequence_2) + 1):
            if sequence_1[i - 1] == sequence_2[j - 1]:
                matrix[i, j] = matrix[i - 1, j - 1] + 1
            else:
                matrix[i, j] = max([matrix[i - 1, j], matrix[i, j - 1]])

    # Reconstruct the LCS from the dp table
    lcs = []
    i, j = len(sequence_1), len(sequence_2)
    while i > 0 and j > 0:
        if sequence_1[i - 1] == sequence_2[j - 1]:
            lcs.append(sequence_1[i - 1])
            i, j = i - 1, j - 1
        elif matrix[i - 1, j] > matrix[i, j - 1]:
            i -= 1
        else:
            j -= 1

    # The LCS is constructed in reverse order
    return "".join(reversed(lcs))


if __name__ == '__main__':
    p_1 = "AACGCGTGATGACTACCTCAGAAATTCGGCCCCCAACCCTTGAGCTGCCTGGGAGCATGTACCCGAGTGTACACTAGCTTGCGGATACTCACTTTCCGGGGCAACGATCAGCTAGTCCCTTAAGCTCGTTCTGAATAAATACGAGGATTTATTTTCTAGGGGACCTCCATAGACACATCGGTAACGATTGGAGCCCTAGAGTCCACAAATCACTCCCCAGATATACTTGCACTCTTTAATTCCCCCTCCAATTCTGCGAGAGGGGCGAGAACCGGTGTGCTTCTCCAGACATTGATAAGAACTATGCGCTCCAAAAAATGGCTTGGTATCCACCCAGATCACGGCATCACATGGTACGCTGCTCCGAAGGGGCCACTCTGGAGGTAATTTCAAACTACGTCAGTAGGGCACGACATGGCTCTGGAAGCAGCTTGAGCAGCATTATGCCGAGGTCACCCTAGACAATCTGTTTGGTGCTCGGTGCAAATGACTGCTCATGCCGGACCACAGATTATCGGCTTGGATGGCATACCGGTGGGAGCCCTGATGCCCCGCTTCGCAATGTCTGCTTCCCACGTGCAGATACTTAGAGCTGCGGTGACGCGACACTATTAGGATACAGACAGATAGCCGATTTGGTTACGGTTCAGTACTACGCGCATGCGGGAAAGTGTTACCACACCCAGGAAGGAGGTCCTGGGAGCTGGTAATTAAGTTCAACGTGCTGCAGCCGATGTAAACAGCTGTAAAAATCAACTTAAATTACAAACGCAGGTTACTATGCAGCGATGTAGTGTGCTC"
    p_2 = "GCTCATGCGGACGGCATCTATGAGAAGAATATGCGGGCTGCCTTCTCACTGTAGTATCGCTACGGCGCCGCAATGAGTTAGCAGTCTCATTGCCCCACTGGCGTTCGCTGAACTGAACGGTTCAATAAACGCCTAACTAAACGCAAGGTCTCCAGTCCTCTCCTTATACTTTTGGAGACGCAGTGCAGAATTACATAGGTACCAGGCTTCACCCGAATAAGGACGCGGCCACTCAGTTATCCTGTACCTTGCGGGGGTTGACCACAAATCCGGACTTGACATTCTTTGAAGACGAGGCCGTGGCAAGCGTTGATCGTCGTTCTAGGATTACGATGGGGCGATCAGTAAGCAAACCTCATGATTGAATATTCCCCGCTATGGCAACTGGTTACTAACACTTGAAAAAATGCGTCCCACACCAGATGTCACCGTAGGTGTCACAGCTTATTATTGCGCAGCCCGATTTGGTGGTAGGACAGGATGTCGTTTACCCCGCTGGGAGTAACTTAGGGAATAGCCGAAAGGGCAAATCGAAAAGTCTCCGACGCAGGCTCGTGATGCTTAACGACTACTCGTTCTAACTACGAACCGGGCAGGAAGTAAGTAATCTATCCTCGTTATGACGCAGTTACCTATACGTTACACCTAAGCCAGTCATCGGTCTTTGAAAATATGCTCCCATGGTGGCGCCTGTACGAAAAGACACTGATTGTATCTGCAAATGACCCGGTTCAAGACGCTGTGGGCTCCATTTTGCCCAGGCATTTGACATAGATGTATGTATGCCACCATCGATCATTTCGCCAGGGCCGGTCCAATGCAGCCTTTCAGTGACGCACTTCCACCCATTGCCGGTCACTCTTTATTCTGCCTCTTGTTT"
    print(function(p_1, p_2))
