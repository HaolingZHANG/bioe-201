from copy import deepcopy
from numpy import ndarray, zeros
from typing import Tuple

BLOSUM62 = {
    "A": {"A": +4, "C": +0, "D": -2, "E": -1, "F": -2, "G": +0, "H": -2, "I": -1, "K": -1, "L": -1,
          "M": -1, "N": -2, "P": -1, "Q": -1, "R": -1, "S": +1, "T": +0, "V": +0, "W": -3, "Y": -2},
    "C": {"A": +0, "C": +9, "D": -3, "E": -4, "F": -2, "G": -3, "H": -3, "I": -1, "K": -3, "L": -1,
          "M": -1, "N": -3, "P": -3, "Q": -3, "R": -3, "S": -1, "T": -1, "V": -1, "W": -2, "Y": -2},
    "D": {"A": -2, "C": -3, "D": +6, "E": +2, "F": -3, "G": -1, "H": -1, "I": -3, "K": -1, "L": -4,
          "M": -3, "N": +1, "P": -1, "Q": +0, "R": -2, "S": +0, "T": -1, "V": -3, "W": -4, "Y": -3},
    "E": {"A": -1, "C": -4, "D": +2, "E": +5, "F": -3, "G": -2, "H": +0, "I": -3, "K": +1, "L": -3,
          "M": -2, "N": +0, "P": -1, "Q": +2, "R": +0, "S": +0, "T": -1, "V": -2, "W": -3, "Y": -2},
    "F": {"A": -2, "C": -2, "D": -3, "E": -3, "F": +6, "G": -3, "H": -1, "I": +0, "K": -3, "L": +0,
          "M": +0, "N": -3, "P": -4, "Q": -3, "R": -3, "S": -2, "T": -2, "V": -1, "W": +1, "Y": +3},
    "G": {"A": +0, "C": -3, "D": -1, "E": -2, "F": -3, "G": +6, "H": -2, "I": -4, "K": -2, "L": -4,
          "M": -3, "N": +0, "P": -2, "Q": -2, "R": -2, "S": +0, "T": -2, "V": -3, "W": -2, "Y": -3},
    "H": {"A": -2, "C": -3, "D": -1, "E": +0, "F": -1, "G": -2, "H": +8, "I": -3, "K": -1, "L": -3,
          "M": -2, "N": +1, "P": -2, "Q": +0, "R": +0, "S": -1, "T": -2, "V": -3, "W": -2, "Y": +2},
    "I": {"A": -1, "C": -1, "D": -3, "E": -3, "F": +0, "G": -4, "H": -3, "I": +4, "K": -3, "L": +2,
          "M": +1, "N": -3, "P": -3, "Q": -3, "R": -3, "S": -2, "T": -1, "V": +3, "W": -3, "Y": -1},
    "K": {"A": -1, "C": -3, "D": -1, "E": +1, "F": -3, "G": -2, "H": -1, "I": -3, "K": +5, "L": -2,
          "M": -1, "N": +0, "P": -1, "Q": +1, "R": +2, "S": +0, "T": -1, "V": -2, "W": -3, "Y": -2},
    "L": {"A": -1, "C": -1, "D": -4, "E": -3, "F": +0, "G": -4, "H": -3, "I": +2, "K": -2, "L": +4,
          "M": +2, "N": -3, "P": -3, "Q": -2, "R": -2, "S": -2, "T": -1, "V": +1, "W": -2, "Y": -1},
    "M": {"A": -1, "C": -1, "D": -3, "E": -2, "F": +0, "G": -3, "H": -2, "I": +1, "K": -1, "L": +2,
          "M": +5, "N": -2, "P": -2, "Q": +0, "R": -1, "S": -1, "T": -1, "V": +1, "W": -1, "Y": -1},
    "N": {"A": -2, "C": -3, "D": +1, "E": +0, "F": -3, "G": +0, "H": +1, "I": -3, "K": +0, "L": -3,
          "M": -2, "N": +6, "P": -2, "Q": +0, "R": +0, "S": +1, "T": +0, "V": -3, "W": -4, "Y": -2},
    "P": {"A": -1, "C": -3, "D": -1, "E": -1, "F": -4, "G": -2, "H": -2, "I": -3, "K": -1, "L": -3,
          "M": -2, "N": -2, "P": +7, "Q": -1, "R": -2, "S": -1, "T": -1, "V": -2, "W": -4, "Y": -3},
    "Q": {"A": -1, "C": -3, "D": +0, "E": +2, "F": -3, "G": -2, "H": +0, "I": -3, "K": +1, "L": -2,
          "M": +0, "N": +0, "P": -1, "Q": +5, "R": +1, "S": +0, "T": -1, "V": -2, "W": -2, "Y": -1},
    "R": {"A": -1, "C": -3, "D": -2, "E": +0, "F": -3, "G": -2, "H": +0, "I": -3, "K": +2, "L": -2,
          "M": -1, "N": +0, "P": -2, "Q": +1, "R": +5, "S": -1, "T": -1, "V": -3, "W": -3, "Y": -2},
    "S": {"A": +1, "C": -1, "D": +0, "E": +0, "F": -2, "G": +0, "H": -1, "I": -2, "K": +0, "L": -2,
          "M": -1, "N": +1, "P": -1, "Q": +0, "R": -1, "S": +4, "T": +1, "V": -2, "W": -3, "Y": -2},
    "T": {"A": +0, "C": -1, "D": -1, "E": -1, "F": -2, "G": -2, "H": -2, "I": -1, "K": -1, "L": -1,
          "M": -1, "N": +0, "P": -1, "Q": -1, "R": -1, "S": +1, "T": +5, "V": +0, "W": -2, "Y": -2},
    "V": {"A": +0, "C": -1, "D": -3, "E": -2, "F": -1, "G": -3, "H": -3, "I": +3, "K": -2, "L": +1,
          "M": +1, "N": -3, "P": -2, "Q": -2, "R": -3, "S": -2, "T": +0, "V": +4, "W": -3, "Y": -1},
    "W": {"A": -3, "C": -2, "D": -4, "E": -3, "F": +1, "G": -2, "H": -2, "I": -3, "K": -3, "L": -2,
          "M": -1, "N": -4, "P": -4, "Q": -2, "R": -3, "S": -3, "T": -2, "V": -3, "W": 11, "Y": 2},
    "Y": {"A": -2, "C": -2, "D": -3, "E": -2, "F": +3, "G": -3, "H": +2, "I": -1, "K": -2, "L": -1,
          "M": -1, "N": -2, "P": -3, "Q": -1, "R": -2, "S": -2, "T": -2, "V": -1, "W": +2, "Y": +7}
}


def obtain_score_matrix(sequence_1,
                        sequence_2,
                        indel_penalty) \
        -> ndarray:
    # Initialize scoring matrix.
    score_matrix = zeros((2, len(sequence_1) + 1), dtype=int)
    for index in range(1, len(sequence_1) + 1):
        score_matrix[0, index] = score_matrix[0, index - 1] - indel_penalty

    # Calculate the score.
    for location in range(1, len(sequence_2) + 1):
        score_matrix[1, 0] = score_matrix[0, 0] - indel_penalty
        for index in range(1, len(sequence_1) + 1):
            score_matrix[1, index] = max([
                score_matrix[0, index - 1] + BLOSUM62[sequence_1[index - 1]][sequence_2[location - 1]],  # Match
                score_matrix[0, index] - indel_penalty,  # Delete
                score_matrix[1, index - 1] - indel_penalty  # Insert
            ])
        score_matrix[0] = score_matrix[1]

    return deepcopy(score_matrix[0])


def middle_edge(sequence_1: str,
                sequence_2: str,
                top: int,
                bottom: int,
                left: int,
                right: int,
                indel_penalty: int) \
        -> Tuple[str, Tuple[int, int], Tuple[int, int]]:
    if bottom is None:
        bottom = len(sequence_1)
    if right is None:
        right = len(sequence_2)

    middle = (right + left) // 2

    former_1 = obtain_score_matrix(sequence_1=sequence_1[top: bottom],
                                   sequence_2=sequence_2[left: middle],
                                   indel_penalty=indel_penalty)
    latter_1 = obtain_score_matrix(sequence_1=sequence_1[top: bottom][::-1],
                                   sequence_2=sequence_2[middle: right][::-1],
                                   indel_penalty=indel_penalty)[::-1]
    maximum_score, location_1 = None, None
    for location in range(len(former_1)):
        current_score = former_1[location] + latter_1[location]
        if maximum_score is None or current_score > maximum_score:
            maximum_score, location_1 = current_score, location

    former_2 = obtain_score_matrix(sequence_1=sequence_1[top:bottom],
                                   sequence_2=sequence_2[left:middle + 1],
                                   indel_penalty=indel_penalty)
    latter_2 = obtain_score_matrix(sequence_1=sequence_1[top:bottom][::-1],
                                   sequence_2=sequence_2[middle + 1:right][::-1],
                                   indel_penalty=indel_penalty)[::-1]
    maximum_score, location_2 = None, None
    for location in range(len(former_2)):
        current_score = former_2[location] + latter_2[location]
        if maximum_score is None or current_score > maximum_score:
            maximum_score, location_2 = current_score, location

    if location_2 == location_1 + 1:
        return "↘", (location_1 + top, middle), (location_1 + top + 1, middle + 1)  # Diagonal edge.

    if location_2 == location_1:
        return "→", (location_1 + top, middle), (location_1 + top, middle + 1)  # Horizontal edge.

    return "↓", (location_1 + top, middle), (location_1 + top + 1, middle)  # Vertical edge.


def calculate_alignment_score(sequence_1: str,
                              sequence_2: str,
                              indel_penalty: int) \
        -> int:
    score = 0
    for index in range(len(sequence_1)):
        if sequence_1[index] == "-" or sequence_2[index] == "-":
            score -= indel_penalty
        else:
            score += BLOSUM62[sequence_1[index]][sequence_2[index]]
    return score


def get_alignment_path(sequence_1: str,
                       sequence_2: str,
                       top: int,
                       bottom: int,
                       left: int,
                       right: int,
                       indel_penalty: int) \
        -> str:
    if left == right:
        return "↓" * (bottom - top)  # Vertical edge.
    if top == bottom:
        return "→" * (right - left)  # Horizontal edge.

    flag, location_1, location_2 = middle_edge(sequence_1=sequence_1, sequence_2=sequence_2,
                                               top=top, bottom=bottom, left=left, right=right,
                                               indel_penalty=indel_penalty)
    # Calculate left path.
    path_former = get_alignment_path(sequence_1=sequence_1, sequence_2=sequence_2,
                                     top=top, bottom=location_1[0], left=left, right=location_1[1],
                                     indel_penalty=indel_penalty)
    # Calculate right path.
    path_latter = get_alignment_path(sequence_1=sequence_1, sequence_2=sequence_2,
                                     top=location_2[0], bottom=bottom, left=location_2[1], right=right,
                                     indel_penalty=indel_penalty)

    return path_former + flag + path_latter


def align(sequence_1: str,
          sequence_2: str,
          indel_penalty: int) \
        -> Tuple[int, str, str]:
    alignment_path = get_alignment_path(sequence_1=sequence_1, sequence_2=sequence_2,
                                        top=0, bottom=len(sequence_1), left=0, right=len(sequence_2),
                                        indel_penalty=5)

    alignment_1, alignment_2, index_1, index_2 = "", "", 0, 0
    for arrow in alignment_path:
        if arrow == "↘":
            alignment_1 += sequence_1[index_1]
            alignment_2 += sequence_2[index_2]
            index_1 += 1
            index_2 += 1
        elif arrow == "↓":
            alignment_1 += sequence_1[index_1]
            alignment_2 += "-"
            index_1 += 1
        else:
            alignment_1 += "-"
            alignment_2 += sequence_2[index_2]
            index_2 += 1

    score = 0
    for index in range(len(alignment_1)):
        if alignment_1[index] == "-" or alignment_2[index] == "-":
            score -= indel_penalty
        else:
            score += BLOSUM62[alignment_1[index]][alignment_2[index]]

    return score, alignment_1, alignment_2


if __name__ == "__main__":
    p_1 = ("YFWEQREIDTTIWKNREQQYFICNTWNLQWATIMIWISPEADRDCPAARCMKFEYFDCHMNFDTDMRGSPGHMFDYANHNKFLAHQPLSCVSGNKVFDLMQCNAIAF"
           "HFTKIRMYQWVCQGTHGSNLRSNGWSGCKIVFPIDCMLHGMKYKFAAHRYLRILKKTARLVSNMVPQEYCFIYVSHTVVDGAHMCRAVELYCLGQKEKMAIAVFYGH"
           "VTASKRYEHNEHPPCCGNRDAMKSNPWACKHIVWKCMVRTPLGSGFLFAVVGWVHTCQCCAVWMDWTILQIKEALWHNYSIFFKTMTMLMSGNRPPANKEVHRCWVG"
           "KIIYDCELCEFHFQKTHEHCTWFVFYDMIPYTEWLKYSSCPCCEVNHLRKYKKCQGTICPCSKYKTLDDTQFKTSSDSEQWQKGGSTWKRATRGLKWFLYFVDESRK"
           "CEPAYGRVLFIYYASFIAHYDVTLISPETITKGRSEIYTCFHNFHMTGYWWLVAADYDHTRHMPNWKGNMSFSPNSDMPIQIKQTDYKGLTYMSDESDSQIITYHMN"
           "LAYANGELREVLQLLTWHDKDSHHKGWVSCIWHKTGVQNTCKEPCMPVPDTKSKKISDCEWMHIFPNAWQYDFACCPRTTKGSSMGNEWCSFGWAIMFIARMARGQL"
           "MVYWNNASGENSFQNMYCVAFADWYMCMLALQWKEYGNEISSIILIGGYSTNQMPTDCTLDFDRAQAKPTCEHENLGDTCSFPFHGHNEAFPARCMTPQAHYPLLNK"
           "EDHVPYWVFVGLPDESVIVVYNEHPWDPSLRMKGHHACSTDSMFYGPYRFDHQVKWVNYAWVAGRHFCYQDDHLPHHTFAVSMWGHLQERMVPCKPCPEGWYVDVFN"
           "DKASHEHFYAWQVIVRQQMYVRMFDWQVEYTMATNTKRIIFMWRMNKITHKRHLSRRASFFISDVCPARVSLFCQYINAYKQVPNPRSFPAYLVDMNEACLQLFCFA"
           "MAVVINKADYVDRMQQFRKDDKMRCPASIGVKDRPMATYSLETYTLSHNMHWAHECNRLNYDKVWPMHMEMFVQWFFCPRFNHECETKCHRDWVDRAVLDKYPFEPG"
           "QPHKADFLNIYRCMYCCLGDAPGHRHKSFYPYHTKVQHVRHFCDLLIKNPMDMSQVQDWACIEFKMNITCFIYNGESEVFGLVCLFERMATWEWLLMCTKCYVTTKW"
           "LFVPDDVVGWYEFNCKGASCAPDMPCQYEKSHWCFDWKCSTWPGKTGPYVDVDVNMLKFTYIQTCHHRLIPGAYSDSQTAEQPINEKEKLSLCETPMSWACHTIYCN"
           "MPHQKIGHNQHRLNRQCRYPTEAHSNFWSGCLPIQWLNTWGDHRMCNNFLAALCPYQYLHYMMAQAWEVKKLNHAQVHCKKRCMWSHIDDESKNKRHELVLQYAMNG"
           "NCWSIGYAHCFRNGTSYCRAAWILQHCVMSQDWHGQWQNQCDPFPDNVITIQKYMTHERYTNHELEMDMNGFQFTVRIPWTEITMCVSGVGVILRDPQYHCVETNTE"
           "HTDMHWMDVKKKMPSTVYTMVCCCKLDQQNMHWRIYDSWRCYWMWQINSSPCFIGSEYHKWHAARGEVGYHCREFMYNCMRLQANLIMKGHQCMPWFAAWTYVEKGL"
           "ECCPLCYYANQADEPNPEMGYIWPETQAKHTCSRKCNNKFCHPSIFTGMEPCSMPFTNWCQGKQSRTANMYQQCMQFDASRSDNDMWVERCPCWTFWGHKTMYWKGG"
           "YPCCYRIGMMTEGNFTEWFHTFSLDRVYWGRIVEQSNKSHAREQKCMYQMIDEAELAVPPNQLEFRDVDCWEIRKSKKAWFNPEWQCIMVVHVYREGWIPFNHDHKS"
           "FNYKDKCEQNKVDHIHKSHAKNYRQRMSETVEWRFVPRAPDHMWAVMRPSEYKIQYTCVSINYWNHMYITGKDRIPSGQIPFDNWTFDIFVWNKIHFKMPICHVVYI"
           "CEIWPLDQKIRTINTAESRKTMYDITEAPMVPCATMTTIPTIPHAHKLIDETWTNDRCNALINQEQEKKLVKLSLVYCAMKISSHTRWQEHPTKCKNRESTYDHQHQ"
           "LGWAGHTPPFEAPCHPLEEQDHWQLFAWNYYNADLWQTRSIKRMRMPFFKWKVSKPMITPKCGMSYWSPFQSSVPTVIMLARQGPCVVLSDETKGSYCWCTCCLCKA"
           "VCIYGYCTIYQWMECEWMSRKTPRVFMTMHCHYDYQNQMTMSFMMDKDTRMEENWDQHVCMVFDTTPFPECRCRHIRTPSSYPKVKPSFEEFEPMWFEHKCGWRRVI"
           "FNFGAYWCSNLCRRMHTFGRNEYVTTVRRDRKEMWRVCPQNEKRDSIPYGINHYLHWTKWTVNIGKFMNFPNVGFGVKGHKDCSKFKWYVTQESLGGHCFKQLSTKP"
           "QYDICQEEIQTQSCRIPLIVIAVWNPYPPPTCMYWCPPMPACHCLGTPMWHSQVWFFDQGWYMSRPTGPYCRYMWDGIWRTFWRTWYCEMMLMGYECDLSRMCKEWV"
           "HDCYGGFHFEMQKPSVTFFFMGQEFGHEISDSNRPPHFGIKQYWYWVDQAAPHDECNDSEWEQINKDCNQVWEWMYFMICMAMQLMVWIDAWYDAPMRSKIKNWVMG"
           "DYSWMKKMADLRMEDTGCVPSSQHIHNFFCGYDKLWHWRETFSEMWIRLNDWCCNVVEGCYQAMLQKRNPMASLEIFVQYAQYEHPLIPWQTDMLISYANMCEWTRW"
           "IIVEDMPYVPNELIHMPPLSHYTTDGSHYGGIESKVNKVCWDNVMMMGMTCHNGCDTPFDDGHNKPCSVASMPKMLEVRDYYSRPCDSLKCDEGHGEDQETTVIMTQ"
           "HKQLVQNMNQCTFAAHKWTTMGNDCYDTLPVWVSYVTEHNVHNDPAGFGPGSPFECHHLSFAVEAPPPCSAQQKKQEHICKVFGLYKLGHLCHICFETTFPNNMGCS"
           "GQSEMKTMSVGFCPKNINGHQPLKYVNYACNTEAFHKPGEYHEENFHENIQISDSLGTMNEEECNEETNEEEWWLLVDQMEHQHMQQDCWVHKNYDFLSMFTLAIGR"
           "WWEKDNKWSLRVTSCRAGAYKWDWEISNQEVLWELPWGGNASVKDKEDLEVNLKGIWFVHTDEAERGLFATLCKYRKVWLWGACTFFWDHVLDPTGNEEVKMAQSNI"
           "RESERSRLWPKINWLCDSYHYIQHFAQDPLVEATWLSFEKNWVRHRHDRYFEYHRTQQHHHERAKEFMYFHFWPDGMTFLQLIDQYGWLFRVLASFAYTDNCAWQIC"
           "CERFMNYIKGCCPEAIANNPPINVELTGTDIPYRWYRSKFRYLDSWDVMGMRCHDSVGFMIMLQIDVMMGSIDRYDGYWNPEDIMRVAVCGMNRLYVFLFARHQRWW"
           "RSQPWTEDLDQDHARVTELHYEYQTMQLKRQNYQHCACCFIRKIQTKRLWTGKQIQGLKYREEEVHIQNVPFGVEQIWYEHVLVKQPYEGMMEWKIKLYKNLMTCPE"
           "PDKEYCTEMIHPHDYEPVSHLIPDEQMRFMPAYHEKPKEIRAAAPSEHWNLKGIWRCVHNVHDMIPAANMWGPYVHGAKGFDMSQLDAHCAHVTFQYHPWHRTTVSK"
           "FMDTMNPARLKGHSVCCRYSFVSKKTLWVTYEMYVSGGMEDQLTIALPVYLFETYCELEKKDRYSNWYYPAWDTIAWFSTRVWTKSDNPPPRMMDFNPIMWEFDRCT"
           "MRGTCWSPMLNSTAAFSTIPICKAIKGQCMQRAAQVWYDKDYVTGDCCWETQEDHAKPYFQEHQNYMMERTAYRELPGAQIFVNYFKDALDMSYCTMVGSLETWHLL"
           "QDQPMGRQHGTTQCQHYTKWKQMHWLALGRVSHCVYMRFCYVYINCLTKGDHIAHQIQNQLHLIDSPAPIGHGRVTPAWEIDMDKHYKSFNEVSDNRRDDFTNEQIL"
           "WPEMWLFLAPWSHCHNNNWFRRQDQCPDHSYCDWCLSFQTRNRSYICYNALVQHPCPEDHYGYFKEKFQTIPFMSFWECGNWYPFGHMQWETTISHEHIFTMWRWNP"
           "SFYCTTVGWVGVQIFYWRVMFWLTHVSKNKMRSCGDGSDERPKPGMVNTYFFKHHRGPGLWMGHWRCEVPTPYWCAAPWVSYRSDIRWMMSSLYNIVENLLRHKNWM"
           "WQDHLRDRTEMEQDDPNCIGEKHCMSAVFTEVPTTGKGIVTANGPDCRNAVQNQWSVRLVCEVHNEWDIIWDWWTWQDRPHRPIRIWQCEECCSMDPWKYWLPLKEI"
           "YGSQMMNWWNCECMASDGPWSGYLPTYPFCTFIRDIVNQYPAAEIVVIHRIGNTHTGTNLTRCIQFNVRACWYRHHVIKEGQWRVWPPKQMMPRPQATVPRWMLPAW"
           "LKVCANTAARGVGHFNTCPFVWIKYMFYTDFYKQHCWSRSWYIFQIISCQDGPYLIQFFSMRWNPLGRKNGETRDYNHMCGPSYICEMSNNHRDLYLAVMWLKETTN"
           "QWPLVDMGCKSLSMTADCFDRYEVSLDSWDDPQEGKCDNTHMGTDILDTKCQMTQEDMPESQNYTMNMANEWFPKCYTATPGMKWQCLGHKEKKEQLDTPFEGVHGK"
           "RTRDEWSSFTNGWMCIMQYALFVHKAGKLFKCNVSFVLCWAPVFWIMNSATWRVHVNIYPGTIFNCQKITIQCDHRVWSVVKYWRDGESIHPRLWRSHWMQVRLGYV"
           "KDLYLNYFKMVWVSMVECMLIHHYAGFICGPLSVAHAVHQWTMDYLHTMVNWKYHGRHVGCMVPDKPIHYTDALKRQIECMCMWWSANNQPIDDHMREYCDFKVNNE"
           "NKRGEALGDKETNNAAQEATEVHVEDTDLGQHDAAAINWYTVLSLQRESFDTQWLFTSTDMWRTQWYKHNSKCWGKRHMGQPCEPVTPESGKACVNPPRNEWLHTLC"
           "VQIGTDVCPKDGVIHNMQAVPGVHWTDACNIHKPPDLCHADLKYEDADETTWAFFQHSKENEMVHHRLGDPFLRGVDQDEHLYKGVRIGVMQLGTEDHFYCSVPMWS"
           "GAPLIKFGKYILMPIEIKVGKTQVMDNTYNADDRSWFIKTPNDEAMGWRKGTYPRICYNRPHDHYTFGISSGRWRNLEKFQWLLSLGVAQNGMLGTAIWMDVDMAKI"
           "DRSLGHRVTHNERLCCNEPSWQVCQIKEEDGWPATNEGNALQHVCESSIFMTRSNLGVNKTDWECQIPQSQGIEFYWLLHYDYMYFVKGIHSWEFIILPWPGSICVP"
           "SGAEWDLSGVVSAVLNKMHPGEFHPMNPHYTFFCQHTLIVPSLASYNTKEYIAEHRHSHNQNMMDQRCKWPWNMAVNEDYKFGPYNSCTSAAGTGHCRAPAVHEMNT"
           "VVEITKFGASRKRCPSRMKHQKTWGTQGHVPGQCQEDIDTQKEIEVLMSISWKCPHIQHNLSDFRRREKIHARRLVHETMDWRHCSQVCRNVSHGPNFCFIKIDKCF"
           "FPCKDTCGPLCLVDFMERFLDLSDVLMCIWLTNFILCRAEWTTASIHHINQMPVWFPGKKCRDRFIEPWSKPFHQTSKIASCMSMPFNKHHSAVELEIDVIYAAFEY"
           "GNIRTKCCTARPHGHGSAWWKEHMMHTGVHHYIPFCTFGFCTRHHGDHPWMRSCHHAGWIPWITLMERKPTTFFFLAQCGGLSFPDCQPLWKFCPELCVSVGDGAKC"
           "WWHYFYKNTHQAPEGKFFDPYGEEVEIHLAHVHIMKFHKYAKKAQLEMEFDGQSAVLKEKSSVSITSHYRYIYNKLKNFIKVWVARPMASTKHSRDMRHPSKRCMYG"
           "GETWKRKMECCKTSPHWNFCQCVARKYFGKFPSAGSTKPPATLNECMFTQPMPSIGSYSGHNCKLRYMNDMTYQFCHHFQMFKSCISERWMRMQLAVVSGISWYGEE"
           "GLTKRNHHIKWMNRQLVTQHPEDCAWQTVYACCSRLVPQIALGAPRDHQFEMNLKQNFNSSWCSMQLSKRMWHIQLCRMVTNQKTDTPGVWSHAYFDTQAWLEKLEL"
           "ADIHVFSSDHTNCPYEICIFNYLMLLHDIVSSAFYMVVKCTWRSQQKQSGYSICFWCRAFIIEDFMMYTFQNRSDLYYHVTPYIMLSGRIADHYIAYGMVEQERDVT"
           "TKVMDGSCEPSNSEPYKMIEENKLHGCVAGIVNWEITPQNKGATCERWNNYRGLIGAMMDHYMWFWKNRHMVVFPFSSYNHPRHTMHRWRRQSISNYSQMKLYGERY"
           "GHWRQGESWQLFFEMCMMAYHVQMCIAGDVLKNLCMQRQQPCNPDIHTPYQIDGLWCYQPVEMFDNNKAYQAHLYVRCIADRWMRKTECRQPLWTHYACNYIKILYI"
           "LAKKACRAQVNCLTRKLEHPFDPLMCPGTENMWQLSLQLDCMMYSKLLCPQTASEGGMDADVMKWRTPWCRPFQRTCHYICGSVWFILLHVFITEEERFSHDEWSRA"
           "WLEHFLRIIYYNFCACGSQMNKSINDVFGTKLTMDGINGSPRQFPFGNHRTSIIYGVSNCIKICKAHMEASKSTPWKLSRMSIPGFPDPICGVGPQILREQYGPNKT"
           "ELTTFKGTTQVDYNPVEVLCEWKMKMFIIRNMMKDVHCCETVQTDKKLMGPCNRYTECIRHRSHFGPHMRDAFFVMTRPVHDPDLSSYWMKNMKWSGKYAGNQMSYE"
           "HTCPDMFQMHLVKEQLQTWSTGQIPSYFGVIDYAIGKLCTGYSIHSMQCFQLTPLCWESQNEYPFDRIFWGEQVTCTYIWNHWTNECCQYVLFPLKAPREAENQHDI"
           "NEFQVGGDGHHNPSIPMIIHYGCPAQCTRYREFFEVGMISNNQIVAWKGLGFQMFYWPTGQHVIYYVVYLKMGKFMIQCKDIGLQIFFKLVQCCEKLCCLRNVHARM"
           "SVDMIGFQECSCEHVLQDGSAYSCFAFQGEMHFTGMGILCAQFQDCACAEKQMSCSMTPDCPWLFAELAVHQVAVKQWNHSKCGEDFKEMRWFFMDAYPHGSDMATQ"
           "DFFKFWDGFWRAMRYPRDWICQCYDCKFQVMGEQGFAWNQGVKTPGMHNIVQPVSSVEVIFIKFPQTNFLIWNQVQHMAHNHESCYYDKAWVFSMCIHNPQQKKAMM"
           "LFDTSQTKLTVQTCGREQRGNCRMCLTCTNCYQQMWCCYHNALKHYGPMGRYYDHGPTEQIRPTPSCPTEYVCILLPEKEHIMVCFDILIAFMGYFCNDSFVVWWTI"
           "LNHIYVKAEDNMQKGKPGFLEGEFIFHIQHEPSSRSSHIDNEWAIGFYQGAMDMEVYPCIVPNKESYQHQFTLVNAYSFNCVFYKVKLDCMKEEFHYAWKEYRVKWG"
           "QEESGTRALYLKPTWPFQAKRTGFKAVWRIF")
    p_2 = ("YFWEQREIDSQQYFICICINLQVATICYQFINIIWISPEADRDCPAAEYFDCHMNEKDPVGMQWGCRTWCCVFDYANHNKFLAHQPLSCVSGNCEDRIGVFDLMQCN"
           "AHWTKIRPYQWVCASAYLVSHTHGSNLSSNGWSGCKIVFQGQMAWAQKNAAHRYLRPLKKTARLVSNMVPQEYCFIYFDSRSHTVVDGAKMQPSHMCRAVELYPLGQ"
           "KKMAVAVFYGHVTKRYEHNEHPPCRGNRDAMKWNPWACKMYITPLGGHLFLVLGWGIKLHMSQHTCQCEMVWHDWTIEQIKEALWHNLSIWAKVMTFLMSSNCTPPA"
           "NKIHVHTCVVGKIIYDCEFQKTHEHCTWFYFYDMIPYTEWLSCPCCEVNHLFFHTGQLAFAQAAPYNCGKTQGTPCSKYKTLDDTQFPYSSDSEWQKGGRLYFVDES"
           "RKCEPAYGRVDVTLISPETQTKGHMQINDMRRHMPNWMGNMSLSPNSDQVKGLTYHSCIYQIQQMEAEPTHCCTDSQIITYHAYANGELREVLICRYWHDKHGCCTH"
           "SYIWHKTGVQNTYKEPCPVPFEYHSSDCEWCHAWQYDFARKCPRTLCSFIQSMWAIMISWMEGCIIARMAFHFRGQLMVYQWLQNNASGMKSIDLQYCVAFATWFMC"
           "MLQWKEYNNEISIILIGGYSTNQMYIKNNPTFRHWIVLLTLDFDLGWSAPDAQAKPTCETQQENLHDTCSFPFHEHNAIIKWGKGAFPARCMTPQAHYPLLNKELHT"
           "PYWVFVGLPDSKVDFSVNVECIQYDPSLRMKGNHACSTDSMFSLWYGPYRFDQQVKMYWIMHYRVNYALWDLRHFECYQDDHLPHSSRMCKPCPEGWYKDVFNDKAS"
           "HEWTAEFYAWQVIVRLQMYVRMFVWQTEYTMATNTKRAWLSRRANWETETSDVCPMHPSLMIINAPKQVPYPMEPRSFPAYLQDDMIEACLQLFCFAMAVVILKADY"
           "VDRMQQKDGVKDRNEYGVESLETYTLSHVMHKRMKMGHACNRLILNVQWNCACESYFVQWFFCPRNHECETKPHDWVDHPAVLPFKADDAHDQDTLPDNLKCMIYVP"
           "RFCMYCCLEKFDGRQTPYHTKDKLIKNPMDMSQVRPAPGADWANQNDGIEFIDCFIYNGESEVFGHAVCLYERMATKEWLLSIYCYVTTKWLNVPWYASCAPDMPGQ"
           "QRHWAEKSLPKEWNWCFDWKCSTWVGKTGPYVDVDVRMHNQAETPTCHHRLTKGAESINAYGESDSQTAETPINEVMPMHTIYQKHGHNQRQHPTEAHWNFWSWVMN"
           "VGDLHYKIQWLNYEAHWGAHRMCNIFIGSANRFFLAALCPYQYNPELCLSTALYMMAQAWEVKKLECTVSYEILHAQVHCKKRCTCVGSQRDDEEVEVLQYAMNGNC"
           "CSCFRNGAWILQHCGQWQNQCDPFPDNVITICIMDMNGFQHVRIPWTEITACVSLAQCDPQYHCTMGEHTRMRVRCLWMPSTVYTMVCDMPKLWNRAIIYDSWRCMW"
           "MWQSSPFYGWFIGPEYHKWHAAEGEVGYHCREFNLGYNSMRLQNLIMKEHRCMHWFLECCPLCYYKNQADEAVALRKALNVEMGYYWPERVAKCNSMPAQWIEPCSM"
           "PFTNWCQGKQSRTANMYQQQMQFDASRSPNRMWTNMWVERCQCIATFKGWERHMVCTWKTMYTKLIKGGYPCCYRIGFAMNEANFTEWFHTFLNKCMYQMIDEAELA"
           "VPPNQLESGHQSRDVIHWYDCWEIRKSPKAWFNPETQCIMVGFSYEHVYSSSEGDIPFNHDNYKDHPICHKSHEKGYRQRMSETVEWRITKTMVPRAPDQKFNDAVM"
           "RQCTPEYKIQYSCVSSNGKCVSPNIPSGQIPFDDIFVMSNKIRCTMQMNDYICQIWPLDQKIRTINMIGVAMSRFSYRYKRCVEYDEAPMWPQLLHTIPTIPSAHKL"
           "IDEKHIYSWTNDCCNALINQEQEVEHYWKLSMAPTQITYLSLVYCEGQYPYMKISSHTRWQYADHAPHPTNCKNRESTYDHQHEHAQPVLGWAGHTPPIMARLEEQD"
           "HWQLFAWEYYNADKRMRMSYFPNKYCFFMTWKVSKPMIPVVPCTPKCFQQSVPTVIMLARQCVGWPEVVLSYETKGSYCWCTCCLHKQVCIQDLQEMEVHMTMHCHY"
           "DYQNQMTMSFMMDNVRRMEENYADQHVCMRMIRTPVHIRGFQDSYPEVKPSFEEFMPMWFEFFFGAYWCSNYCRRGFEVQNPTFGRNEYVTTVRRDRKEMWRVCPQN"
           "EKRDSIPYGIHWTKWTVNEIFSPNVGLWDQDCSKFKWYVTQNSLGWAYRCDHEPHIFKQLTKPQYDICQEKIQTQSCRSGYYPCSEVFNPYKPTCHAAMCVWGDGAC"
           "HCLGTCPAIIDMWHSQVWFRNYECDMTPYCRYMELAIDGIWRTFWKVWYCEDLMASIAQVDLYLPQYECDLSRMCKEWVHDCYGPKEHAFIWQKWKYFEMQKPSVTE"
           "FECTRLHEISDSNRPPHFGIKQYWYWVDQAQPVDACNDSEWEQIGKDCNQVWEWMYFICCAMQCMVWIDAWDDAPMMGDYSWYCDQKTYKKMYKDLRMEDTGCVFFC"
           "VYDKLWWDIFKMSCCCNVGMVLSTFLGCYLAMLQKRNPMASREINTNQYAQYEHNLIPWQTWMCSYANMCEVPNELRADSHTYLGMPSFHGLSHYTTDGCHYGGCVC"
           "WDNVMMMTGPLTFDDGHNKPASVASMMMYSRCCDSLIGDEGHGLDQETTVIMTQHKSVIWHVDWKLNQCTFAAHHHISYHDWTTMMRLFPDRAVSYVTEHNVHNDPA"
           "GFYPGSPFPCHHLSFATDLVEAPPPCSAQQKKQCKVFGLHKLGHLCHIGCRWNEHGQSGFCPKNIKGPLKKVNYACATEAFHKWSGEYHEENRLIVCISNCRSWEED"
           "NWEEWWLFIRSPYEQAVDQMEHQHMQQDCWVHKNYDFLRDGARQCVPDHLRAEGTQMEKQLVMQKSNSCRAAAYKWMWEISNQEVLWELPWGHNPSVKDKNTTEAER"
           "GLFATLCKYRKVWLWSFWMCPPANQWFFWDHVFDPTGNEVVKMAQSNIRESEISRLWPKINWVMDRCDSYHYIQHWAQDPLNTATWLSFRHPQDRYFEYMRTQQHHH"
           "VGNGDNVYWMINFWPDGVTFLQLIDQYGWLFLVLASFAYTDNHPICCERFGNYIKGCDHEKWRTEAIQTNPDINVELPGTDIPRSKFRYGKCDSTCGQSWDVMGMRC"
           "HDHDGFMIMCHDVFEYIDRYDNNGVRFNYMQYDIMRTMCQDVTQAVCAMNRLYVFLFARHQRWWRSYCFPWMEDLYNWFCFEQNSIYQAQVLKRQNYQHCVNFCCFI"
           "RKIMTKRLHHTGKCCTQGCYWVEETHIQNVPFGVEQITYMDLTRVTMVVTQINDQENSEYEGMRAAVPIEKQPESMIHYELEIKIKTYKNSFNNCTTCPEPNFSIQG"
           "KEYSTEMIHDRQLDSTDLQMRNSPGEIRSWHAISEHIWRCVHNVHEGDMIPAAYVHGWKGFDMSQLDAHCAHVTFGYHPTTVSKFMNTMNPAREKGHSVCCVNYRHT"
           "TPVLMDKKTLVVTYEMYVSGGMEDQLTIAGPVYLLRLTGYCESDYSCWVNGNIIPEYPAWYETDTIAWFSTRVWTKSDNPPPRMLDFCPINWTMRGTCWSPMLNQCP"
           "VASSTAAFSTIPICCMQRAAQENGSEWYMKDYITGDCHWSAEAKPYWQEHQNYMMSRTAYREKPGAQIETNYFKDALFDKMSYCTMVGSLETWHLLQDSFCKKGRQG"
           "VGEGLGTTQCAHYTKWKQMHWMYTYALIIRVSHCVYMRFCYVYINCLTKGCHIAHQIQQQLHLCDSPAHGMNVNWEIDMDKHYKSMNEVSDNRRDDFTNEQILWWEM"
           "WLFKANSYLIAPWSDRHKCHNNLWRWQDQCFMEDHSYCDWCMSFQAYNRSYICYNALVQHKCPEDHFKEKFQTIPFMSFWECGWPFIHMQWETAISHPVHVLHIFTM"
           "WRTVGWVGVQIFYWSKEKMRSFDKNLRKRGKPGMSNTYFFKHHRGRGLWMGHWRCEVPQPYWLEMEKEQEYLAHATRSDIRFHKCPYEYCDSQYKEYNIVMNLNHWA"
           "RSMSCLESWQDHLRPRTSPNCIGEKHCCRANLTGMRSAVFTEPTTGKGIVTANGPDCDMPVRLVCEVHNEWTWQLRPHQPIGIWQRTCSMDPWKGSQMMNWWNCECM"
           "ALPNIYMEYNRNHIFCYGSAMKHAWDDPENWLLWHQEPGYPAAEVVIHRQLEGKVYVWNTHTGTPTELTACIQFVRACWYRHHKIKEGQMMPEQPQDGTPFALPARL"
           "KVCANTAGTRGWGHFNTCPFVWIKYMFYKDFYPPPFYPMTKGRFQWYISCQMGPYLEDWNQFFSMRWNTAKVGFVMEAHQYYTRVYNHMCGPRSQLYICEMSAPKQN"
           "PRRIQDPDDRDLYLADQVFYFHDAWLKETTNQWPLVNMGCKSLSMTADQFDRMYRSRICEVSLHDHFQHPQEGKCDNTHMGNDHSVGVILDVVETARDMTQEDMPLS"
           "QRIMWSQNYTMNMWFPTCGIGNIVGDKSVYCFQGYNMVHKEKKEQLDTDFEGVHGRDWMCTMQYQEVMPQSPLFVHKAGKLFKCGQHRDIDIQVSFVYVCWATWRVH"
           "VKGRIFNCQKITIQCDHRFRVWSVVWTHSYRYWRDRSHWMQHRLGYVVDLGGEWGYGVWVSMVEYYLIHHYAGFICGPLSVAHAVHQWTMDYLHTMVNWKYGGRHVG"
           "CMVPDKGPICFYAYDVEELTWCRQIECMCMWKLTSANPIDHMREYCDFKVNRKWIMCAMAENSRLVWMNAVNIQEATFVHVESTDLGQHDAAAIALFCLEWYWVLSL"
           "QRESFDTMDLFTSTAKWRTQWYKHNCLCWGWRHMGQPCEVNLCVQYSGVMCDKDGVAVNMQAHWPPGVHWTDQMVTNTCNIHHPPDHCHADLKYEDADYQTTWAFFK"
           "CYYRCNQGNWDENEMVHHRLHDVRITHQDEHLYKGVRIGVMQYCSVPMWDEQREARFAGAPLIKFIEIKVGKTQVMTNTYNADDRSWFIKTPNDEQMGWNRPHDQYT"
           "GNWGMPDNGIWSGRWRNLEKFQWLLSLGVAQNGTLGTAIWMDDRSLGHSAGSTRVTHNERLCHNWDGWPATNELQAWGVFMTTSIPQSQGIEFYWLLHYDYMYFVGI"
           "HDFKWEFIILPWPGSICVASGWHDPEEEWDLSGVVSAVFYANPTYNGEFHPMKPHYTFFCQHTLIVPSLASYNTKEYIHNQNMMFERCKICWNDAMEGPNEDYKFGT"
           "SWCGAGTGHCRAVHEMNTSVEITKFGASRKRCPSRMKHFCFALFKTWGQGHEQCKEDIHYYRISWKCPHIQHNLEWPNYITKTHARRRVHETMDVRHKYGSHRHCKA"
           "WPCENQYWCRNVSHGPNFCFIKIRVSTGWFICKDTCGMLCLYWEFMGAYQDSFLDLIEMDVLNKHCRHIFILCRAEWTTADIHHINQMFPGKKCRDRFDEPNKHIIE"
           "QTSKNKHHYKKQSQIDSIYMACCTGHGHGSAWWKVHHYICADETLYPFCTFGFCTRCHGDHPWMRSCHHAGWIPWITLMEQCGGLSWVDIELHLPESSLSRCECPLW"
           "SYILKSQFTWPELCNLPGDGAKCWWHYFYKNTHQAPEGKFNDPYGEEMGTNGMTEIHLAHVHIMKFHKYTKKAQLEMEFDGQSAQLKRKTNVQQNASVSITSHFKLK"
           "NFIKVWVASPMASTYNRHSRDMLHPSGPCNKHQEFWKDEMECCKTSPHWNFCQDVADKVEEFKYFGKFNSAGSTKPPQPMPSIGSCKLRYMNDMTYIFERWMRMQQC"
           "AVVILCYMFISWYGEECYCRSQLTKRLHHIKWMNRFPHLTRYARGFKSTGNWESNYIHLVPQIAGDFEKCDRQFEMNLKQRFNSSRGFPYRQQEHIQASIAQAAAAR"
           "GICRMVTNQDTDTPCMWTVDSHAYQALADIHVFSHMEQCCRSSKAHTNCPICIFNYLMLLHDIQSSACHPDICTWWILHLIDQHFWYRAFIIEDMKQNRSDCEPYYH"
           "VTMLSGRIADHYIAYGMVTECRQQERDVTTIFEVMDSEPYKMIEENKLHGNILAWLILVAGIVNNKGATCERWNNYRGDDHYMWFWKMANEKCDDFPKSSYNHPRHT"
           "MARWDRQIISNYSQYGHWGQNESWQLFFEMCMMEYQRCQMCIAGDRQIDDWQIDGLWGQFEEWIVEMFYQLHLYVRRNIAPFVIWQAHLRWMRKTEKYWEVPRQTKY"
           "ACNYIKALASSSIAAFILAKPKMDSNLACRAQVNCLTTGKRKLEHPFDPLMCPGTENGVYRWQLSLQDGDCMSKLLCPGDVMKWVTPWCHYICAATSVWVFITEEER"
           "FSHDHVLRIIYYNFCCTMDGPRQFPFGNHRTSIIYGVSNCSKICKAHMEACYFWEYRYTPFPCYHYLSRMSIPGFPDPICGRHGMHYMPQILREQYGPNKTELRTFM"
           "GTTEKSTIFGEVDYNTCYCTIGGVEVAGLDHCEWKMKQRHNCFDQDVHCCETVQQDKNLMGHFGMLMIQYIRWWWDAFFVMTRPVKSGSPDPDGLMKWRSTREFYAG"
           "NQMVYEHTCPDMFLQTWFTGQIPSYLGQGQDPGVIDYAIGKLCKVSERDWDEAFLYWLSIHSMQCFQVTKESQNEYPFDRIFWGEQVTCTYIWNHWEQNCTQTNFYL"
           "FWDLHMDHYEAEPWQHINEFSVGGDGHIGYGCAQHEMMLIFEVGMIPYVMEDVPWKGLYFQMFWYFYKAHCHWPTGQHVIYYVKYLKMGKFVLYIFEKLVQCCEKLC"
           "CMRNVHARMSVECKDRMSCEHVLQDGSAHCKGCHFVFSWLYHWCCFAFQGETHFDIRYLHQRQDCTCAEDQNWWWESQMSCSMTPDCPPLFAELALHQVAVKQWNHY"
           "PAKCGEDFKEMRWFIMDAYPHGYDMADGIWRACDKDVVWICQCPQGVKTPGMHNIQQPVSSVEVMFIKIPQTCECIWNNVTPYTCYYDKAVFSMCIFSLPQQWQTKL"
           "QVQTCGREQRGNCRMCLTCTNCYYCCCQIFDKIKGNTEQIRFTPSCPTENRCILLPEKEHIMVCFYTFQLHHILIACESTMGYFCNDSFQVWWTILRQNPFGKAEDN"
           "MQKGKPGFLMRNFWEVFGEPTADRQYRPSSWKTPTYMSSHIDNSCQTSTEWAIGLLIFTVPTAYQRAHDMAVYPNKESYFHQFTLVNAYSFNCIFYKVLDCMKEEKH"
           "GLQRWLQRVKWGEEETGTRAPTWPFAAKRTGFKAIWRIF")
    p_3 = 5

    r_1, r_2, r_3 = align(sequence_1=p_1, sequence_2=p_2, indel_penalty=p_3)

    print(r_1)
    print(r_2)
    print(r_3)
